/**
 * refs:
 *  - https://stackoverflow.com/a/36592176 (merge stream)
 *  - https://stackoverflow.com/a/40572663 (browser-sync not reloading)
 *  - https://nightlycommit.github.io/twing/templates.html
 *  - https://stackoverflow.com/questions/67641687/cannot-disable-cache-in-twing-template-engine-node-js-express-js
 *  - https://nightlycommit.github.io/twing/language-reference/tags/include.html
 */

const
  { src, dest, watch, series, parallel } = require('gulp'),
  merge = require('merge-stream'),
  concat = require('gulp-concat'),
  order = require('gulp-order'),
  rename = require('gulp-rename'),
  bookmarklet = require('gulp-bookmarklet'),
  change = require('gulp-change'),

  twing = require('gulp-twing'),
  { TwingEnvironment, TwingLoaderRelativeFilesystem } = require('twing'),
  twingEnv = new TwingEnvironment(new TwingLoaderRelativeFilesystem()),

  yargs = require('yargs/yargs'),
  { hideBin } = require('yargs/helpers'),
  argv = yargs(hideBin(process.argv)).argv,

  browserSync = require('browser-sync').create();


// flag to append browser-sync script tag (otherwise it won't auto-reload page)
//  because htmlsingle file generated by gulp-bookmarklet doesn't include
//  a body tag, so browser-sync can't automatically append its script tag
let APPEND_BROWSER_SYNC_TAG = false;

function appendBrowserSyncTag(cb) {
  APPEND_BROWSER_SYNC_TAG = true;
  cb();
}

// flag to automatically ignore scripts in development (marked with starting _)
//  this is useful to leave unfinished scripts out of prod build (publish)
let IGNORE_UNFINISHED_SCRIPTS = false;

function ignoreUnfinishedScripts(cb) {
  IGNORE_UNFINISHED_SCRIPTS = true;
  cb();
}

function newScript(cb) {

  const args = yargs(hideBin(process.argv))
    .help(false)
    .version(false)
    .option('name', {
      alias: 'n',
      describe: 'choose script name'
    })
    .option('type', {
      alias: 't',
      describe: 'choose new script type',
      choices: ['basic', 'togglable', 'miniapp', 'dialog'],
      default: 'basic'
    })
    .demandOption(['name', 'type'], 'Please provide a name and a valid type')
    .fail(function (msg, err, yargs) {
      if (err) throw err;
      console.error(msg);
      console.error(yargs.help());

      cb();

      process.exit(1);
    })
    .parse();

  return src('src/building_blocks/stubs/'+ args.type +'.js.twig')
    .pipe(twing(
      twingEnv,
      {
        scriptName: args.name
      },
      { outputExt: '' }
    ))
    .pipe(rename((path) => {
      path.basename = '_' + args.name;
    }))
    .pipe(dest('src'));

}


function build() {
  // needed to bypass twing caching mechanism,
  //  otherwise would not reflect changes while watching files changes
  const twingEnv = new TwingEnvironment(new TwingLoaderRelativeFilesystem());

  // this provides us a way to use twing templating "tags"
  //  while still using js/css/html syntax highlight from the editor
  function removeTwingPlaceholders(content) {
    return content
      .replaceAll("// @twing ", "")         // js
      .replaceAll("// @twing-include ", "") // js
      .replaceAll("/* @twing-start", "")    // js/css
      .replaceAll("@twing-end */", "")      // js/css
      .replaceAll("<!-- @twing-start", "")  // html
      .replaceAll("@twing-end -->", "");    // html
  }
  let scriptsGlob = ['src/*.js'];

  if (IGNORE_UNFINISHED_SCRIPTS) {
    scriptsGlob.push('!src/_*.js');
  }

  let bookmarks = src(scriptsGlob)
    .pipe(twing(
      twingEnv,
      {},
      { outputExt: '' }
    ))
    .pipe(change(removeTwingPlaceholders))
    .pipe(bookmarklet({
      format: 'htmlsingle',
      file: 'bookmarks.html'
    }));
  let styling = src('src/appends/styles.html');

  let merged = merge(bookmarks, styling);

  if (APPEND_BROWSER_SYNC_TAG) {
    merged.add(src('src/appends/browser-sync.html'));
  }

  return merged
    .pipe(order(['bookmarks.html', '*.html']))
    .pipe(concat('index.html'))
    .pipe(dest('dist'));
}

function reload(cb) {
  browserSync.reload();
  cb();
}

function serve() {
  browserSync.init({
    startPath: 'index.html',
    server: {
      baseDir: './dist/'
    }
  });

  watch(['./dist/**/*'], { events: ['change'] }, reload);
}

function listen() {
  watch(['./src/**/*'], { events: ['change'] }, build);
}

const devTasks = series(appendBrowserSyncTag, build, parallel(serve, listen));

module.exports = {
  new: newScript,
  build: build,
  publish: series(ignoreUnfinishedScripts, build),
  dev: devTasks,
  default: devTasks,
}